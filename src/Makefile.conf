TOP=/usr/local/src/mipsL4
TOP=/home/gernot/work/mipsL4
INSTALL=/usr/local/mipsL4
INSTALL=/home/gernot/work/install/mipsL4
BOOT=/tftpboot

XDEVBIN=/usr/local/mips-sgi-irix6/bin
XDEVBIN=/usr/local/mipscrossdev/$(ARCH)/bin
XDEVBIN=/home/disy/mipscrossdev/$(ARCH)/bin
TOOLBIN=/home/gernot/work/install/mipscrossdev/$(ARCH)/bin


# targets are INDY,P4000,U4600

#TARGET_MACH=INDY
#TARGET_MACH=P4000
#TARGET_MACH=U4600
TARGET_MACH=LS232


HOST_BAUD=B9600
#HOST_BAUD=B4800
#HOST_BAUD=B38400


TESTTARGETS=t0 t1 t2 read tlb mem ex ipc_test l4_tester time reg_test map_test \
	#mun

#############################################################################
# -DTLB_INSTR - turn on TLB instrumentation code
# -DGT_TICK - use the gt64010a to generate timer interrupts
# -DKDEBUG - turn on kernel debugging (tracing etc)
# -DMAP_INSTR - turn on mapping and unmapping intrumentation
# -DL4_IPC_RESTRICT - turn on restricted IPC (no inter-task other than chief)
# -DNO_CACHING - switch off caching to debug
# -DIPT_128 or -DIPT_8 - hack to initialise IPT memory pool
# -DTLB_CACHE - turn on tlb2 flush code
# -DNO_PTE_PRINT - turn off page table printing in pgpt

# for unix benchmarks and sparse
#DEBUGFLAGS=-DGT_TICK -DNO_PTE_PRINT -DTLB_INSTR
# for original mapping benchmarks
#DEBUGFLAGS=-DMAP_INSTR #-DTLB_CACHE
# for clean kernel
#DEBUGFLAGS=

#DEBUGFLAGS=-DTLB_CACHE -DTLB_INSTR -DGT_TICK
#EBUGFLAGS=-DGT_TICK -DIPT_128
#DEBUGFLAGS=-DTLB_INSTR -DGT_TICK -DNO_PTE_PRINT
DEBUGFLAGS=-DTLB_CACHE -DNOSGI


#for vm-tlbcache-gpt-pair
# tlb2-1way-128.o tlb2-1way-8.o tlb2-2way-8.o tlb2-2way-128.o
TLB2_OBJ=tlb2-1way-128.o

# choices
# vm/vm-tlbcache-gpt-pair needs -DTLB_CACHE
# vm/vm-gpt-pair
# vm/vm-gpt
# vm/vm-mpt
# vm/vm-ipt -DIPT_128 or -DIPT_8
# vm/vm-cpt
VM_CODE=vm/vm-tlbcache-gpt-pair

USERLIB=$(TOP)/lib
MAKE=make
MFLAGS=--no-print-directory 
RM=rm

# Use this for GNU toolchain:
TOOL_CHAIN= GNU
# Use this for SGI toolchain
#TOOL_CHAIN= SGI

.SUFFIXES: .c .S .s .o

ifeq ($(TOOL_CHAIN),GNU)
CC= $(XDEVBIN)/mips-sgi-irix6-gcc
AS= $(XDEVBIN)/mips-sgi-irix6-gcc
AR= $(XDEVBIN)/mips-sgi-irix6-ar
LD= $(XDEVBIN)/mungilink
# for (depreciated) 32-bit libs:
CC32= $(XDEVBIN)/mips-sgi-irix6-gcc
AS32= $(XDEVBIN)/mips-sgi-irix6-gcc
AR32= $(XDEVBIN)/mips-sgi-irix6-ar
LD32= $(XDEVBIN)/mips-sgi-irix6-ld
.S.o:	;	$(AS) $(ASFLAGS) -c -o $*.o $*.S
# for building development tools (to execute on development platform):
NATIVECC= gcc
NATIVECFLAGS=-g -ansi
ABI_OPT= -mabi=64
C_ABI_OPT= -mno-abicalls
LD_ABI_OPT=
ABI_OPT32= -mabi=32
C_ABI_OPT32= -mno-abicalls
LD_ABI_OPT32=
C_OTH_OPT32= -Wall
endif

ifeq ($(TOOL_CHAIN),SGI)
CC= cc
AS= as
AR= ar
LD= ld
CC32= cc
SA32= as
AR32= ar
LD32= ld
.S.o:	;	cp $*.S $*.s && $(AS) $(ASFLAGS) $*.s
NATIVECC= cc
NATIVECFLAGS=-g
ABI_OPT= -64 -non_shared
C_ABI_OPT=
LD_ABI_OPT= -64 -non_shared
ABI_OPT32= -32 -non_shared
C_ABI_OPT32= -mno-abicalls
LD_ABI_OPT32= -32 -non_shared
C_OTH_OPT=
endif


.c.o:	;	$(CC) $(CFLAGS) -c $*.c

# for building the whatis database.
# some systems use catman:
MAKEWHATIS=catman
MAKEWHATISFLAGS= -w -M
# others use makewhatis:
#MAKEWHATIS=makewhatis
#MAKEWHATISFLAGS=


DEPSUFFIXES=*.S *.c

ifeq ($(TARGET_MACH),INDY)
MACH=-DINDY
LINKADDR= 0xffffffff88050000 # cached, leave room for stack and kernel base
KERNELLIBS=indy/libindy.a libkern/libkern.a $(VM_CODE)/libvm.a 
MACHTARGETS=indy_serial_driver #i8254_driver
KERNELNAME=kernel-serial
MACHSUBDIR=indy
endif

ifeq ($(TARGET_MACH),P4000)
MACH=-DP4000
LINKADDR= 0xffffffff80050000 # cached, leave room for stack and kernel base
KERNELLIBS=p4000i/libp4000i.a  libkern/libkern.a $(VM_CODE)/libvm.a
MACHTARGETS=serial_driver #sonic_driver
KERNELNAME=kernel-serial
MACHSUBDIR=p4000i
endif

ifeq ($(TARGET_MACH),U4600)
MACH=-DU4600 -DFLOAT64 #-DTLB_CACHE
LINKADDR= 0xffffffff80050000 # cached, leave room for stack and kernel base
KERNELLIBS=u4600/libu4600.a  libkern/libkern.a $(VM_CODE)/libvm.a 
MACHTARGETS=serial_driver
KERNELNAME=kernel-serial
MACHSUBDIR=u4600
endif

INCLUDE=-I$(TOP)/include
LIB=$(TOP)/lib

#-OPT:space=ON -TENV:kernel

KCFLAGS= $(MACH) $(DEBUGFLAGS) -O3 -G 0 -mips3 $(ABI_OPT) $(C_ABI_OPT) \
	-non_shared -Wa,-non_shared,-G,0 -nostdinc $(INCLUDE) 
KASFLAGS= $(MACH) $(DEBUGFLAGS) -fullwarn -mips3 $(ABI_OPT) -non_shared -G 0 \
	-nostdinc $(INCLUDE)

USERLIBS=-ll4 -lc

USERCFLAGS= $(MACH) -O2 -G 0 -mips3 $(ABI_OPT) $(C_ABI_OPT) $(C_OTH_OPT) \
	-nostdinc $(INCLUDE)

USERASFLAGS=-G0 -mips3 $(ABI_OPT) -non_shared $(INCLUDE)

USERLDFLAGS=-mips3 -L$(LIB) $(LD_ABI_OPT)

USERCRT0=$(USERLIB)/crt0.o

